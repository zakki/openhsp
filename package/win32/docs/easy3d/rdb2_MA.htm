<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=SHIFT_JIS">
<META name="GENERATOR" content="IBM WebSphere Studio Homepage Builder Version 9.0.0.0 for Windows">
<META http-equiv="Content-Style-Type" content="text/css">
<TITLE></TITLE>
</HEAD>
<BODY>
<P><BR>
<FONT size="+3">モーションアクセラレータについて</FONT><BR>
<BR>
<BR>
<FONT size="+2">１、モーションアクセラレータとは</FONT><BR>
<BR>
<BR>
<B>概要</B><BR>
モーションアクセラレータ（<B>以下では「MA」と略します</B>）とは、簡単に言うと、モーションの自動遷移機能のことです。<BR>
（　アクセラレータという名前ですが、これは、MS Visual Studioのキーイベントをリソース化する機能の名前を真似たもので、<BR>
モーションが、速くなるというわけではありません。　）<BR>
<BR>
MAを使う利点は、大きく３つあります。<BR>
①、モーション遷移（変更）の設定を、RokDeBone2で、ビジュアルで行える。<BR>
②、イベント番号（変更のトリガーとなるもの）を指定して関数を呼ぶだけで、モーションの遷移（変更）が、行える。[Easy3D]<BR>
　　（モーションの途中から、途中への遷移も可能です。）<BR>
③、モーションの遷移（変更）時に、<B>モーションとモーションの間の補間が、自動的に行われる</B>。[Easy3D]<BR>
<BR>
<BR>
<BR>
<B>イベント番号について</B><BR>
②で、イベント番号という言葉を使いましたが、これについて、少し、説明します。<BR>
ゲーム中で、モーションを切り替えるタイミングというのは、<BR>
プレイヤーが、キーボードを押したり、自分の打った弾が敵に当たったときなど、いろいろあると思います。<BR>
これらのモーション変更のトリガー（きっかけ）となるものを、イベントと呼ぶことにします。<BR>
イベント番号とは、複数のイベントをそれぞれ、区別するために使う番号のことです。<BR>
イベント番号は、複数のイベントを組み合わせて指定できるように、<B>２の乗数</B>の値を使います。<BR>
<BR>
<BR>
具体的な手順は、<BR>
①あらかじめ、走るモーションはイベント１、転ぶモーションはイベント２、ジャンプはイベント４、、、のように、<BR>
　RokDeBone2で、それぞれのモーションに、イベント番号を設定します。<BR>
②<B>*.moa</B>というファイルで保存します。<BR>
③Easy3Dで、moaファイルを読み込みます。<BR>
④Easy3Dの関数に、イベント番号を渡すことで、自動的に補間モーションを挟んで、モーションの遷移が行われます。<BR>
というようになります。<BR>
<BR>
<BR>
<BR>
<BR>
<FONT size="+2">２、RokDeBone2での設定方法</FONT><BR>
<BR>
MAの設定は、<B>ツールバーの「モ」ボタン</B>を押して行います。<BR>
<BR>
RokDeBone2で設定した内容は、*.moaという拡張子のファイルに保存します。<BR>
RokDeBone2のFileから、読み込み、書き出しが出来ます（下図）<BR>
<BR>
<BR>
<IMG src="jpegfiles/rdb2_ma_filemenu.jpg" width="394" height="470" border="0"><BR>
<BR>
<BR>
<IMG src="jpegfiles/rdb2_ma_init.jpg" width="471" height="504" border="0"><BR>
<BR>
上の図は、RokDeBone2で、*moaファイルを読み込み、ツールバーの「モ」ボタンを押したときの画面です。<BR>
ツリービューの形式で、モーションの変更設定が表示されます。<BR>
<B>親子階層は、２段までです</B>。（親と子供の２段。子供の子供は無し）<BR>
<BR>
「モ」ボタンを押すと、現在、読み込んでいるモーションが、親項目として、ツリービューに羅列されます。<BR>
初期状態では、子供は、ありません。<BR>
<BR>
親項目は、読み込んだモーションを表し、<BR>
子供項目は、親項目から分岐する（イベントトリガーで変化する）モーションを表します。<BR>
<BR>
例えば、上図では、「アイドル左」というモーション再生中に、<BR>
４種類のイベント番号をトリガーとして、「アイドル右」、「へぼ踊り左」、「小躍り左」、「大踊り左」の４種類のモーションに<BR>
変化するための設定がされていることになります。<BR>
<BR>
<BR>
<IMG src="jpegfiles/rdb2_ma_trunkmenu.jpg" width="415" height="444" border="0"><BR>
<BR>
MAの設定は、ツリービューの項目を、マウスで右クリックすることで、行います。<BR>
上の図は、親項目を右クリックしたときのメニューです。<BR>
「分岐を追加」と、「プロパティ」の２種類の操作をすることが出来ます。<BR>
<BR>
MAの設定で、一番最初にするべきことは、<BR>
<B>親項目のモーションに、名前をつける</B>ことです。<BR>
名前をつける際には、全てに異なる名前をつけることが必要です。<BR>
（同じ名前があると、moa保存時に、エラーが出ます。）<BR>
<BR>
<IMG src="jpegfiles/rdb2_ma_trunkprop.jpg" width="562" height="453" border="0"><BR>
<BR>
<BR>
上図は、親項目を右クリックし、「プロパティ」を選択したときの図です。<BR>
モーション名のエディットボックスに、重複しない名前を記述して、OKボタンを押してください。<BR>
<BR>
<BR>
２番目にするべきことは、<B>アイドリングモーションを１つだけ選ぶ</B>ことです。<BR>
アイドリングモーションとは、イベントが無いとき（イベント番号に０を指定したとき）や、<BR>
再生中のモーションが終了したときに、再生されるモーションのことです。<BR>
<BR>
親項目を右クリックし、「プロパティ」を選択し、「アイドリングモーションにする」にチェックを入れてください。<BR>
１個も、アイドリングモーションが設定されていない場合や、<BR>
２個以上設定されている場合は、moa書き出し時に、エラーになります。<BR>
<BR>
<IMG src="jpegfiles/rdb2_ma_addmenu.jpg" width="685" height="487" border="0"><BR>
<BR>
<BR>
モーション名の設定と、アイドリングモーションの指定が終わったら、<BR>
いよいよ、モーションの分岐の設定をします。<BR>
<BR>
上の図は、親項目を右クリックし、「分岐の追加」を選択したときの画面です。<BR>
まず、「分岐先モーション名」のコンボボックスの矢印をクリックし、<BR>
親モーションから、どのモーションに分岐するかを指定します。<BR>
<BR>
まず、「イベント番号設定」のチェックボックスで、チェックをつけて、<BR>
どのイベント番号で、モーションの分岐が起こるかを指定します。<BR>
イベント番号には、複数のイベント番号を組み合わせて指定できます。<BR>
例えば、イベント１といべんと４にチェックを入れた場合は、<BR>
イベント１とイベント４が、両方オンになっているとき（例えば、５など）のときに、分岐が起こります。<BR>
<BR>
<BR>
「分岐元フレーム番号」は、「いつでも分岐する」と、「指定フレームより前で分岐する」の２種類から選択します。<BR>
<BR>
「いつでも分岐する」を選んだ場合は、<BR>
親モーション再生中に、「イベント番号設定」で設定したイベント番号が生じたときに、<BR>
「分岐先モーション名」で指定したモーションへ、直ちに（補間モーションを挟みますが）、分岐します。<BR>
<BR>
「指定フレームより前で分岐する」を選んだ場合は、<BR>
エディットボックスに、フレーム番号を指定します。<BR>
「イベント番号設定」で指定したイベントが、指定したフレームより小さいフレーム番号で生じた場合に、<BR>
モーションが分岐します。<BR>
<BR>
「分岐先フレーム番号」には、「分岐先モーション名」で指定したモーションの、<BR>
どのフレーム番号にジャンプするかを指定します。<BR>
通常は、モーションの先頭に分岐するので、０を指定します。<BR>
<BR>
<BR>
親項目をミグクリックし、「分岐の追加」を選択し、<BR>
モーションと、イベント番号を指定する作業を繰り返し、<BR>
どのように、モーションを分岐させるかを、設定します。<BR>
<BR>
<BR>
<BR>
<IMG src="jpegfiles/rdb2_ma_branchmenu.jpg" width="244" height="445" border="0"><BR>
<BR>
<BR>
上の図は、子供項目を右クリックした場合のメニューの画面です。<BR>
「分岐を削除」、「プロパティ」の２種類、実行できます。<BR>
<BR>
「分岐を削除」を選ぶと、右クリックした子供項目を削除できます。<BR>
<BR>
「プロパティ」を選択すると、「分岐の追加」時と同じダイアログが出て、<BR>
設定を修正することが出来ます。<BR>
<BR>
<BR>
<B>子供項目の表示順と優先順位</B><BR>
「分岐を追加」を複数回、実行すると、子供項目の表示順番は、実行した順番と異なる場合があります。<BR>
これは、分岐時の優先順位が高いほうから表示する仕組みになっているからです。<BR>
<BR>
分岐時には、子供項目のうち、上に表示されているものから、順番に、条件に合うかどうかを判定し、<BR>
条件に合うものが見つかった時点で、判定を終了し、モーションの分岐を行います。<BR>
<BR>
優先順位のつけ方について、簡単に説明します。<BR>
イベント番号は、複数チェックできますが、チェックした個数が多いほうが、優先順位が高くなります。<BR>
（イベント番号の合計ではなくて、イベントの個数の合計が、多いほうが優先されます。）<BR>
<BR>
イベントの個数が同じもの同士の優先順位は、<BR>
「分岐元フレーム番号」によります。<BR>
<BR>
分岐元フレーム番号に、小さい値が設定されているものほど、優先順位が高くなります。<BR>
「いつでも分岐」を指定している場合は、一番、優先順位が低くなります。<BR>
<BR>
<BR>
<IMG src="jpegfiles/button_new.gif" width="30" height="10" border="0"><B>共通分岐イベント番号</B><BR>
親項目のプロパティ（分岐元のプロパティ）ダイアログには、共通分岐イベント番号と、共通分岐禁止イベント番号の設定部分があります。<BR>
<BR>
共通分岐イベント番号は、全ての親項目に分岐を設定したいときに使用します。<BR>
例えば、「アイドル右」というモーションに共通分岐イベント番号１を設定したとします。<BR>
そうすると、全ての親項目に「アイドル右」の分岐を作り、「アイドル右」にイベント番号１を設定したのと同じ効果があります。<BR>
つまり、共通分岐イベント番号を使うと、何度も同じ分岐を設定しなくても済むということなのです。<BR>
共通分岐イベント番号を設定したモーションは、他の分岐モーションよりも優先順位が高く設定されます。<BR>
<BR>
共通分岐禁止イベント番号は、共通分岐イベントの中で分岐させたくないモーションがあるときに設定します。<BR>
例えば、モーション１に共通分岐イベント１を、モーション２に共通分岐イベント２を設定していたとします。<BR>
モーション３の親項目では、モーション１の分岐を有効にしたいが、モーション２の分岐は無効にしたいとします。<BR>
そういうときに、モーション３の共通分岐禁止イベント番号に２を設定します。<BR>
<BR>
<BR>
<IMG src="jpegfiles/button_new.gif" width="30" height="10" border="0"><B>イベント番号０でアイドリングに戻す</B><BR>
親項目のプロパティ（分岐元のプロパティ）ダイアログには、「イベント番号０でアイドリングに戻す」という設定項目があります。<BR>
これは、ループモーションをアイドリングに戻す際などに有効です。<BR>
例えば、「歩く」などのループモーションを、ボタンを押している間だけ再生したい場合、<BR>
歩くモーションに、「イベント番号０でアイドリングに戻す」を設定しておきます。<BR>
キーを離しイベント番号が０になると、アイドリングに戻るようになるので、便利です。<BR>
<BR>
<BR>
<IMG src="jpegfiles/button_new.gif" width="30" height="10" border="0"><B>補間モーションを挟まずに分岐する</B><BR>
分岐先のプロパティダイアログには、「補間モーションを挟まずに分岐する」という設定項目があります。<BR>
イベントが生じたときに、ただちにポーズを変えたいときなどに使用します。<BR>
<BR>
<BR>
<B>ファイルの保存</B><BR>
MAの設定が終わったら、fileメニューの「モーションアクセラレータ(moa)書き出し」メニューで、<BR>
moaという拡張子のファイルを保存します。<BR>
この際、MAで設定したモーションファイル(qua)も全て、保存されます。<BR>
mao保存時には、保存フォルダを指定するようになっています。<BR>
<B>指定したフォルダの中に、moaと全てのquaが保存されます。</B><BR>
<BR>
<B>moa読み込み時には、moaと同じフォルダに、参照しているquaが全て存在する必要があります。</B><BR>
<BR>
<BR>
<IMG src="jpegfiles/button_new.gif" width="30" height="10" border="0"><FONT size="+2">３、ファイルフォーマット</FONT>　（<B>version 2.0</B>）<BR>
<BR>
以下に、moaファイルの一例を、貼り付けます。<BR>
<BR>
//////////////////// 次の行からから、moaのはじまり ////////////////////////////<BR>Motion Accelerator File ver2.0 type01<BR>
<BR>
#TRUNK {<BR>
	&quot;アイドル正面&quot;, &quot;アイドル正面.qua&quot;, &quot;Idling0&quot;, 0, 0, 0<BR>
	&quot;アイドル左&quot;, &quot;アイドル左.qua&quot;, &quot;Normal0&quot;, 0, 0, 0<BR>
(中略)<BR>
&quot;へぼ踊り右&quot;, &quot;へぼ踊り右.qua&quot;, &quot;Normal0&quot;, 0, 0, 0<BR>
	&quot;長い踊り&quot;, &quot;長い踊り.qua&quot;, &quot;Normal0&quot;, 0, 0, 0<BR>
}<BR>
<BR>
#BRANCH &quot;アイドル正面&quot; {<BR>
	&quot;アイドル右&quot;, 1, -1, 0, 0<BR>
	&quot;アイドル左&quot;, 2, -1, 0, 0<BR>
	&quot;へぼ踊り正面&quot;, 4, -1, 0, 0<BR>
	&quot;小躍り正面&quot;, 8, -1, 0, 0<BR>
	&quot;大踊り正面&quot;, 16, -1, 0, 0<BR>
	&quot;koke2&quot;, 32, -1, 0, 0<BR>
	&quot;zukkoke&quot;, 64, -1, 0, 0<BR>
}<BR>
<BR>
#BRANCH &quot;アイドル左&quot; {<BR>
	&quot;アイドル右&quot;, 1, -1, 0, 0<BR>
	&quot;へぼ踊り左&quot;, 2, -1, 0, 0<BR>
	&quot;小躍り左&quot;, 4, -1, 0, 0<BR>
	&quot;大踊り左&quot;, 8, -1, 0, 0<BR>
}<BR>
<BR>
#BRANCH &quot;アイドル右&quot; {<BR>
	&quot;アイドル左&quot;, 1, -1, 0, 0<BR>
	&quot;へぼ踊り右&quot;, 2, -1, 0, 0<BR>
	&quot;小躍り右&quot;, 4, -1, 0, 0<BR>
	&quot;大踊り右&quot;, 8, -1, 0, 0<BR>
}<BR>
<BR>
#BRANCH &quot;小躍り正面&quot; {<BR>
	&quot;小躍り終&quot;, 1, 10, 0, 0<BR>
	&quot;へぼ踊り左&quot;, 2, -1, 0, 0<BR>
	&quot;小躍り左&quot;, 4, -1, 0, 0<BR>
	&quot;大踊り右&quot;, 8, -1, 0, 0<BR>
}<BR>
<BR>
（中略）<BR>
<BR>
#BRANCH &quot;長い踊り&quot; {<BR>
	&quot;へぼ踊り右&quot;, 1, -1, 0, 0<BR>
	&quot;小躍り正面&quot;, 2, -1, 0, 0<BR>
}<BR>
<BR>
}<BR>
<BR>
///////////////////////////// moaファイルの終わり　///////////////////////////<BR>
<BR>
上の例は、Easy3D For HSP3 のMediaフォルダの中のmyというフォルダの中に入っている　my.moa　の一部です。<BR>
RokDeBone2で、ビジュアルで編集し、出力することを想定していますが、<BR>
テキストフォーマットなので、手で、編集することも可能です。<BR>
<BR>
moaファイルは、大きく分けて、３つのパートから成ります。<BR>
１、ヘッダー<BR>
２、TRUNKチャンク<BR>
３、BRANCHチャンク<BR>
の３つです。<BR>
<BR>
一行目の<BR>
Motion Accelerator File ver1.0 type01<BR>
は、ヘッダーです。<BR>
これは、一字一句間違わずに、半角で、記述し、<B>最後に、エンターキー</B>（\r\n）を記述する必要があります。<BR>
<BR>
TRUNKチャンクは、<BR>
#TRUNK {<BR>
}<BR>
で囲まれた部分です。<BR>
<B>「 ｛ 」、「 } 」の直後には、改行（\r\n）が無ければなりません。</B><BR>
TRUNKチャンクは、RokDeBone2でのMA設定の親項目を記述する部分です。<BR>
内容は、<BR>
&quot;モーション名１&quot;, &quot;モーション名１.qua&quot;, &quot;Idling0&quot;, <FONT color="#800080">ev0idle, commonid, forbidcommonid</FONT><BR>
&quot;モーション名２&quot;, &quot;モーション名２.qua&quot;, &quot;Normal0&quot;, <FONT color="#800080">ev0idle, commonid, forbidcommonid</FONT><BR>
というような形式になります。<BR>
モーション名、quaファイル名、モーションの種類　の３つを、半角の「 , 」で区切った形式です。<BR>
最後のモーションの種類には、<BR>
アイドリングモーションのときは、&quot;Idling0&quot;、それ以外のモーションのときは、&quot;Normal0&quot;と記述します。<BR>
<B>アイドリングモーションは、１つだけ指定する</B>ことを想定しています。<BR>
<BR>
ev0idleの項目には、「イベント番号０でアイドリングに戻す」を設定しているときに１、それ以外は０が記述されます。<BR>
commonid, forbidcommonidには、それぞれ、共通分岐イベント番号、共通分岐禁止イベント番号が記述されます。<BR>
<BR>
<BR>
BRANCHチャンクは、<BR>
#BRANCH &quot;小躍り正面&quot; {<BR>}<BR>
で囲まれた部分です。<BR>
BRANCHチャンクは、親項目の数分、存在します。<BR>
（分岐の無い親項目については、記述されません）<BR>
<BR>
まず、#BRANCHの直後に書いてある名前が、親項目のモーション名です。<BR>
記述してある親項目の分岐情報が、{ } の中に記述されます。<BR>
<BR>
内容は、<BR>
&quot;分岐先モーション名&quot;, イベント番号, 分岐元フレーム番号, 分岐先フレーム番号, <FONT color="#800080">補間無しフラグ</FONT><BR>
のようになります。<BR>
分岐元フレーム番号は、<B>「いつでも分岐する」を指定した場合は、-1</B>が記述されます。<BR>
補間無しの項目には、「補間モーションを挟まないで分岐する」を設定したときに１が、それ以外は０が記述されます。<BR>
<BR>
<FONT color="#800080">（紫色の部分が、ver2.0で加わった部分です。）</FONT><BR>
<BR>
<BR>
<FONT size="+2">４、Easy3Dでの使用方法</FONT><BR>
<BR>
Easy3DでのMAの使用方法は、簡単です。<BR>
まずは、サンプルの、e3dhsp3_MotionAccelerator.hsp をご覧ください。<BR>
１から７キーを押すことで、モーションが変化します。<BR>
連打したり、すばやく押したりすると、モーションが変化したりします（moaの設定どおり）<BR>
このサンプルでは、分岐先モーションに、ループモーションが混ざっているため、<BR>
キーが効かなくなったように感じる部分があるかもしれませんが、<BR>
moaの設定どおりになっていますので、ご確認ください。<BR>
<BR>
さて、スクリプトの書き方ですが、<BR>
まず、E3DSigLoadで、sigファイルを読み込みます。<BR>
<BR>
次に、E3DLoadMOAFile　で、moaファイルを読み込みます。<BR>
この際、３番目の引数に、補間モーションのフレーム数を指定します。<BR>
３０FPSのゲームの場合は、５フレームくらいがちょうどいいかもしれません。<BR>
<B>補間モーションのフレーム数が、再生するモーションのフレーム長より長いと、<BR>
望んだ効果は得られませんので、ご注意ください</B>。<BR>
<BR>
ここまで出来たら、後は、<BR>
必要に応じて、イベント番号をセットし、<BR>
E3DSetNewPoseByMOA<BR>
を呼び出せばOKです。<BR>
<BR>
<B>E3DSetNewPoseByMOAは、毎フレーム呼び出す必要があります。</B><BR>
モーションの変更をしたくない場合は、イベント番号に０をセットしてください。<BR>
<BR>
</P>
<P><A href="index.htm">トップページに戻る</A></P>
<P><BR>
<BR>
</P>
</BODY>
</HTML>