------------------------------------------------------------------------------
HGIMG4 REFERENCE MANUAL                High Performance Graphic Image Plugin  
ＨＳＰ拡張ランタイムリファレンス      copyright 2001-2013 (c) onion software  
------------------------------------------------------------------------------

・はじめに

	HGIMG4は、Hot Soup Processor ver3.4以降とともに使用することで、
	画面の描画に関する様々な機能拡張を提供します。

	HGIMG4の特徴

	・OpenGL/ESによる描画、シェーダー言語サポート
	・シーン管理と統合化された物理エンジン(Bullet)サポート
	・FBX,Collada形式のモデルファイル読み込み、アニメーションサポート
	・マルチテクスチャ、バップマップ、ハイトマップ、LODをサポート
	・フォントデータ(TTF)のレンダリングサポート
	・オフスクリーンレンダリング及び各種ポストエフェクトサポート
	・WindowsだけでなくiOS,Android上での動作をサポート予定
	・HSP及びHSP3Dishと同様のライセンス規約、オープンソース 

	HGIMG4は、Windows2000以降で、OpenGLバージョン3.1以上がインストールされた環境で動作します。


・インストール

	HGIMG4は、以下のようなファイル構成になっています。

		hsp3gp.exe (実行用ランタイム)

		docs/hgimg4.txt (このファイル)
		commonフォルダ (HGIMG4ヘッダファイル)
		hsphelpフォルダ (HGIMG4ヘルプファイル)
		runtimeフォルダ (HGIMG4カスタムランタイム)
		sampleフォルダ (HGIMG4サンプルスクリプト & データ)

	HGIMG4を使用したスクリプトを作成する場合には、スクリプトの先頭に
	必ず「#include "hgimg4.as"」という行を追加してください。
	以上で、HSPの機能が拡張され、このリファレンスで説明をしている命令を
	使用することができるようになります。
	まず最初に、付属のサンプルスクリプトを実行してみてください。
	拡張された機能の簡単な使用例を見ることができるはずです。
	サンプルスクリプトは、HSPインストールフォルダ以下のsample/hgimg4
	に用意されています。


・注意点

	HGIMG4は、外部DLLファイルによる拡張プラグインではありません。
	HSP3DISHの機能を内包したランタイムファイルとして提供されています。
	必ず、HGIMG4のランタイムに対応したバージョンのコンパイラ
	(hspcmp.dll)やスクリプトエディタをご使用下さい。
	また、HSP3は実行ランタイムに対応したコードジェネレーター(hspcmp.dll)
	をご使用ください。(HSP3.4以上を推奨)


・命令一覧(メイン)

	setcls mode,color,tex				画面消去設定

	gpreset	option					シーンを描画
	gpsetprm prmid,value				グローバルパラメーターを設定
	gpgetprm prmid,value				グローバルパラメーターを取得
	gppostefx  postid,opt1,opt2			ポストエフェクト生成
	gpuselight objid				ライトオブジェクトの切り替え

	delobj objid					オブジェクトの破棄

	gpcolormat var,color,opt			カラーマテリアルの生成
	gptexmat var,"file",opt				テクスチャマテリアルの生成
	gpusermat var,"vsh","fsh","defs",color,opt	カスタムマテリアルの生成

	gpbox var,size,color,matobj			箱ノードを生成
	gpfloor var,sizex,sizey,color,matobj		床ノードを生成
	gpmesh var,sizex,sizey,color,matobj		板ノードを生成
	gpload var,"file","name"			gpbモデルノードを生成
	gpspr var,bufid,celid				2Dスプライトノードを生成

	gplight var,opt					ライトノードを生成

	gpclone var,objid				ノードを複製
	setobjmode objid,value,mode			オブジェクトのモード設定
	gplookat objid,x,y,z				指定座標に向けてノードを回転

	gppbind objid,mass,friction			標準的な物理特性を設定


・命令一覧(描画命令)

	celputm vxpos,vypos,vcelid,bufid,count		セルをまとめて描画する
	gpdraw option					シーン内の全ノードを描画する


・命令一覧(オブジェクト操作)

	getpos id,x,y,z					ノード座標を取得
	setpos id,x,y,z					ノード座標を設定
	addpos id,x,y,z					ノード座標を加算
	getposi id,x,y,z				ノード座標を取得(整数値)

	setang id,x,y,z					ノード回転を設定
	addang id,x,y,z					ノード回転を加算

	getquat id,x,y,z				ノード回転を取得(クォータニオン)
	setquat id,x,y,z				ノード回転を設定(クォータニオン)
	addquat id,x,y,z				ノード回転を加算(クォータニオン)

	getscale id,x,y,z				ノード倍率を取得
	setscale id,x,y,z				ノード倍率を設定
	addscale id,x,y,z				ノード倍率を加算
	getscalei id,x,y,z				ノード倍率を取得(整数値)

	getdir id,x,y,z					ノード移動量を取得
	setdir id,x,y,z					ノード移動量を設定
	adddir id,x,y,z					ノード移動量を加算
	getdiri id,x,y,z				ノード移動量を取得(整数値)

	getwork id,x,y,z				ノードワーク値を取得
	setwork id,x,y,z				ノードワーク値を設定
	addwork id,x,y,z				ノードワーク値を加算
	getworki id,x,y,z				ノードワーク値を取得(整数値)

	getwork2 id,x,y,z				ノードワーク値2を取得
	setwork2 id,x,y,z				ノードワーク値2を設定
	addwork2 id,x,y,z				ノードワーク値2を加算
	getwork2i id,x,y,z				ノードワーク値2を取得(整数値)

	getcolor id,x,y,z				ノードRGBカラーを取得
	setcolor id,x,y,z				ノードRGBカラーを設定
	addcolor id,x,y,z				ノードRGBカラーを加算
	getcolori id,x,y,z				ノードRGBカラーを取得(整数値)


・命令一覧(補助)

	selmoc id, mocofs				MOC情報を設定
	selpos id					移動座標をMOC情報に設定
	selang id					回転角度をMOC情報に設定
	selscale id					スケールをMOC情報に設定
	seldir id					移動量をMOC情報に設定

	objsetf3 x,y,z					選択中のMOC情報を設定
	objaddf3 x,y,z					選択中のMOC情報を加算

	objgetfv fv					選択中のMOC情報を取得
	objsetfv fv					選択中のMOC情報を設定
	objaddfv fv					選択中のMOC情報を加算

	fvset fv,x,y,z					ベクトル設定
	fvseti fv,x,y,z					整数値からベクトル設定
	fvadd fv,x,y,z					ベクトル加算
	fvsub fv,x,y,z					ベクトル減算
	fvmul fv,x,y,z					ベクトル乗算
	fvdiv fv,x,y,z					ベクトル除算
	fvdir fv,x,y,z					ベクトル回転
	fvmin fv,x,y,z					ベクトル最大値
	fvmax fv,x,y,z					ベクトル最小値
	fvouter fv,x,y,z				ベクトル外積
	fvinner fv,x,y,z				ベクトル内積
	fvface fv,x,y,z					座標から角度を得る
	fvunit fv						ベクトル正規化
	fsin fval,rot					サインを求める
	fcos fval,rot					コサインを求める
	fsqr fval,prm					平方根を求める
	froti fval,prm					整数値角度を小数値に変換

	fv2str fv					ベクトルを文字列に変換
	str2fv fv,"x,y,z"				文字列をベクトルに変換


・HGIMG4の使用方法

	HGIMG4は、Windows上で動作するHSP3のスクリプトエディタなど通常のHSP環境をそのまま 使用して開発を行ないます。
	必ずHSP3.4以降のHSPで作成を行なってください。 HGIMG4環境で動作するスクリプトを作成する場合は、
	最初の行に、以下のコードを追加する必要があります。

	#include "hgimg4.as"

	HGIMG4は、HSP3Dishランタイムを拡張する形で実装されています。
	HSP3Dishが持つ命令をすべてサポートしているほか、いくつかの拡張が行なわれています。
	ただし、HSP3Dishによる制約(外部DLL/プラグインの使用不可、出力は単一のスクリーンなど)も
	同様に発生します。基本的な文法、プログラム制御はHSP3と同様です。
	HSP3Dishについての詳細は、HSP3Dish プログラミングマニュアル・基本仕様ガイド(hsp3dish_prog.htm)を
	参照してください。


・HGIMG3との違い

	HGIMG4では、基本的にHGIMG3とソースコードの互換性はありません。
	しかし、HGIMG3に触れたことがあるユーザーであれば、命令体系やシステム的に継承されている
	点が多いため比較的容易に移行することができるでしょう。

	HGIMG3との主な違いは以下の通りです。

	・HGIMG3ではモデルを生成して、オブジェクトに割り当てていましたが、HGIMG4では
	　オブジェクト(ノードオブジェクト)を直接生成して配置する形になります。
	・ライトの反映、テクスチャ、色、半透明設定などの情報はマテリアルオブジェクトとして
	　生成され、オブジェクトに割り当てる形になります。HGIMG3でsetefx命令により指定されていた
	　マテリアルの設定は利用できません。
	・HGIMG4ではオブジェクトの回転情報を内部ではクォータニオン形式で保持しています。
	　HGIMG3と同様にX,Y,Z回転の角度を与えることも可能ですが、HGIMG3と異なる回転姿勢になる
	　可能性があります。
	・同じモデルを複数配置するような場合は、クローン(gpclone命令)を利用することが推奨されます。


・初期化と描画の方法

	初期化を以下の手順に従って行なって下さい。

	;------------------------------------------------------------------
	gpreset						; hgimgの初期化
	;------------------------------------------------------------------

	gpreset命令は、システム全初期化を行なう命令です。
	初期化はいつでも、何度でも行なうことが可能です。

	初期化が終わったら、いつでも登録されているオブジェクトを表示可能な
	状態になります。
	HGIMG4では、描画を以下のようなループで行ないます。

	;------------------------------------------------------------------
	*main
		;	描画メイン
		;
		redraw 0			; 描画開始(画面クリア)

		;	
		;	各種描画を行なう
		;	

		redraw 1			; 描画終了
		await 1000/60			; 時間待ち(60フレーム/秒)
		goto *main
	;------------------------------------------------------------------

	画面の書き換えに関するソースは、redraw 0で描画開始を知らせて、
	redraw 1により描画終了タイミングを知らせるようにしてください。
	通常のHSP3とは違い、「redraw 0」を指定することにより、スクリーンが
	一旦クリアされます。

	描画を開始してから、box、mes等の描画命令を自由に記述することができます。
	その後、await命令で時間待ち(ウェイト)をします。「await 10」の場合は、
	最低でも10msだけの待ち時間を入れます。

	これらのルールは、HSP3Dishと同様です。
	2D描画に使用可能な描画命令と仕様についても、基本的にHSP3Dishと同じになっています。
	サポートされている命令の詳細は、support_cmds.txtを参照してください。


・3D動作の概要

	HGIMG4は、シンプルで柔軟性のある3D描画システムを提供します。
	重要な構成単位が、「シーン」と「ノードオブジェクト」になります。

	「ノードオブジェクト」は、HGIMG4の操作対象となるもので、
	「ノード」「オブジェクト」とも呼ばれています。
	「ノードオブジェクト」は、3D世界を構成する要素すべてを含んでおり、
	それぞれが独自の番号(ID)を持っています。

	「ノードオブジェクト」には、以下の種類があります。

		「カメラ(視点)」
		「ライト(光源)」
		「3Dモデル(物体)」
		「エミッター(パーティクル発生源)」

	ノードオブジェクトは、以下の情報を持っています。

		識別番号(ID)
		X,Y,Z座標(Pos)
		X,Y,Z回転(Ang)
		X,Y,Z倍率(Scale)
		X,Y,Z移動量(Dir)
		R,G,Bカラー(Color)
		ワーク値(X,Y,Z,W)(Work,Work2)
		マテリアル特性(MatID)
		物理特性(PhyID)

	「シーン」は、複数の「ノードオブジェクト」を含めた世界全体を指します。
	HGIMG4では、「シーン」に登録された「ノードオブジェクト」がレンダリング(描画)の
	対象となります。

	一般的なプログラムの流れとしては、以下のようになります。

		gpreset命令でシーン全体をリセット
			↓
		必要なノードオブジェクトをシーンに登録する
			↓
		ノードオブジェクト情報の設定を適切に行なう
			↓
		描画ループに入る(gpdraw命令でシーンの描画を行なう)

	シーンにノードオブジェクトを追加するための命令として以下が用意されています。

		gpbox var,size,color,matobj			箱ノードを生成
		gpfloor var,sizex,sizey,color,matobj		床ノードを生成
		gpmesh var,sizex,sizey,color,matobj		板ノードを生成
		gpload var,"file","name"			gpbモデルノードを生成
		gpspr var,bufid,celid				2Dスプライトノードを生成

		gplight opt,val1,val2				ライトノードを生成

	シーンに追加されたノードオブジェクトIDは、生成時に指定された変数に代入されます。
	以降は、ノードオブジェクトIDを介して各種情報を操作することが可能です。


・フレームレートの取得

	getreq命令により、描画時のフレームレートを取得することができます。

		getreq fps,SYSREQ_FPS

	上の例では、変数fpsにフレームレート(1秒間に画面が描画された回数)を代入します。
	フレームレートは、基本的に描画ループ(redraw 0〜redraw 1の繰り返し)で指定される
	await命令の待ち時間で決定されます。
	フレームレートを一定に保ち、画面のちらつき(ティアリング)を防止するために、
	VSYNC待ち(垂直同期待ち)を指定することができます。

		setreq SYSREQ_VSYNC,1
		gpreset

	上のように、gpresetの前でsetreq命令によりVSYNC待ちを有効にしてください。
	これにより、通常は秒間60フレームごとの動作となります。
	(その場合でも、await命令は入れるようにしてください)


・3Dモデルデータ

	gpload命令で読み込むためのファイル(.gpb形式)を生成するためのGPBコンバーターが
	同梱されています。

		gpbconv.exe

	を起動することで、GUIによるファイル変換ツールが起動します。
	(内部でコマンドラインツールのgameplay-encoder.exeを呼び出します)

	.gpb形式とともに読み込まれるマテリアル情報(.material)も、GPBコンバーターから
	出力が可能です。.materialは、テキスト形式のファイルなので、通常のテキストエディタで
	閲覧したり、必要に応じて内容を編集することが可能です。

	.gpb形式はfbx形式から変換することが可能です。
	fbx形式は、Autodesk社の3Dツールで使用されている標準的な3D形式です。
	http://www.autodesk.co.jp/adsk/servlet/pc/index?siteID=1169823&id=14945696

	他の形式からfbxに変換するためのFBX Converterが公開されています。
	これにより、OBJ, DXF, DAE(Collada), 3DSの形式から変換することができます。
	http://usa.autodesk.com/adsk/servlet/pc/item?siteID=123112&id=10775855


・現バージョンでの注意点

	以下の機能は未実装です。将来のバージョンでサポートされる予定です。

	・line,pset命令

	・モデルアニメーションの各種コントロール
	・マテリアルパラメーターの詳細設定
	・コリジョンと物理パラメーターの詳細設定
	・HGIMG3相当のイベント機能を実装
	・ポストエフェクト(マルチパスレンダリング)に関する設定
	・日本語フォントのサポート
	・パーティクルとエミッターの詳細設定
	・マルチテクスチャ、バップマップ、ハイトマップ、LODサポート
	・マルチプラットフォーム化(iOS、Android)


・ライセンスについて

ユーザーがHGIMG4を使って作成したオリジナルのソフトウェア(実行ファイル)の権利は、それを作成したユーザーに属します。
ユーザーがHGIMG4を使って作成したオリジナルのソフトウェア(実行ファイル)を、
自由に通信、即売会、店頭などで展示、配布、販売することができます。
ライセンス料は必要ありません。
HGIMG4とそのソースコードは、HSP開発セットと同様の修正BSDライセンスが適用されます。

HGIMG4は以下のライブラリを使用して開発されています。

GamePlay3D v1.7.0
http://www.gameplay3d.org

Bullet Collision Detection and Physics Library
Advanced Micro Devices, Inc.
http://bulletphysics.org

OpenHSP
Copyright (C) 1997-2013, ONION Software/onitama.
http://hsp.tv

Disclaimer

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
OTHER DEALINGS IN THE SOFTWARE.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
Neither the name of the Onion Software nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

ソースコード形式かバイナリ形式か、変更するかしないかを問わず、以下の条件を満たす場合に限り、再頒布および使用が許可されます。 

・ソースコードを再頒布する場合、上記の著作権表示、本条件一覧、および下記免責条項を含めること。 
・バイナリ形式で再頒布する場合、頒布物に付属のドキュメント等の資料に、上記の著作権表示、本条件一覧、および下記免責条項を含めること。 
・書面による特別の許可なしに、本ソフトウェアから派生した製品の宣伝または販売促進に、Onion Softwareの名前またはコントリビューターの名前を使用してはならない。 

本ソフトウェアは、著作権者およびコントリビューターによって「現状のまま」提供されており、明示黙示を問わず、商業的な使用可能性、および特定の目的に対する適合性に関する暗黙の保証も含め、またそれに限定されない、いかなる保証もありません。著作権者もコントリビューターも、事由のいかんを問わず、 損害発生の原因いかんを問わず、かつ責任の根拠が契約であるか厳格責任であるか（過失その他の）不法行為であるかを問わず、仮にそのような損害が発生する可能性を知らされていたとしても、本ソフトウェアの使用によって発生した（代替品または代用サービスの調達、使用の喪失、データの喪失、利益の喪失、業務の中断も含め、またそれに限定されない）直接損害、間接損害、偶発的な損害、特別損害、懲罰的損害、または結果損害について、一切責任を負わないものとします。 


-------------------------------------------------------------------------------
                                                HSP users manual / end of file 
-------------------------------------------------------------------------------
